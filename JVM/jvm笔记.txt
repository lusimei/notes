JVM笔记：


语言流行排行榜：
https://www.tiobe.com/tiobe-index/


jvm编译执行的操作： 语法检查 语法解析 字节码生成

jvm生命周期： 启动 执行 退出  

虚拟机：hotspot    JRockit（最快）  J9
java -version命令可以看到当前java环境所使用的虚拟机

#JRockit J9 虚拟机没有方法区

30.类加载：linking(链接)之prepare（准备） number = 0 initial（初始化）: 20 -> 10
声明的变量在后面，不能在变量之前去调用它，可以赋值
类只会被加载一次，所以static{}也只会执行一次

Bootstrap ClassLoader引导类加载器是 C/C++语言实现的

ClassLoader（抽象类） 所有类加载器（除引导类）继承自它

37.沙箱安全机制：自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器
加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java.lang.String.class）,
报错信息说没有main方法，就是因为加载的是rt.jar包中的String类。这样可以保证对java
核心源代码的保护，这就是沙箱安全机制。

38.加载的类存放在方法区

44.一个栈桢对应着一个方法
45.Stackoverflowerror栈溢出异常 OutOfMemoryError内存溢出异常

51.局部变量：在使用前，必须要进行显式赋值！否则编译不通过
成员变量：在使用前，都经历过默认初始化赋值

56.静态链接：目标方法在编译期可知
动态链接：被调用的方法在编译期无法被确定下来
非虚方法：方法在编译期就确定了调用版本（如：静态方法、私有方法、final方法、实例构造器、父类方法）

60.方法返回地址：方法正常退出时，调用者的PC计数器的值作为返回地址，即调用该方法
的指令的下一条指令的地址。（该方法被调用的位置的下一行，方法正常执行完毕的情况）

62.方法区 和 堆 有 Error 跟 GC， 虚拟机栈 和 本地方法栈 有 Error 

64.Hotspot JVM 将本地方法栈和虚拟机栈合二为一

66.方法区（元空间） 和 堆 是一个进程（java程序main运行后就是一个进程）共享的， 每个线程单独拥有 程序计数器 本地方法栈 虚拟机栈

72.Eden内存空间满后，触发垃圾回收（YGC/Minor GC 年轻代垃圾回收）标记为垃圾的内存（红色）被清理掉，幸存者转入
年轻代S0区，并记录age记数器,第二次GC时把幸存者放入未占用的S1区，并把S0区还在引用的幸存者也放入S1区，将age记数增1，
GC回收Eden时会顺带把S0与S1的垃圾回收

76.GC会导致用户线程暂停，影响吞吐量

89.jdk7及以前，习惯上把方法区称为永久代。jdk8开始，使用元空间取代了永久代。
永久代使用的是java虚拟机的内存，导致java程序更容易OOM,元空间使用的是本地内存（当前运行java程序的主机内存）
BEA JRockit / IBM J9 方法区(使用的本地内存)可以达到几个GB,所以不容易出现OOM
超过本地内存上限也会报OOM

91.新生代和老年代的默认比例是1:2，eden区和两个survivor区默认比例是8:1:1
方法区内存大小默认值依赖于平台。windows下，-XX:MetaspaceSize是21M，-XX:MaxMetaspaceSize 的值是-1，即没有限制。

98.永久代的回收率很低，在full gc的时候才会触发，而full gc是老年代的空间不足、永久代不足时才会触发。

100.方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。

118.String不可变，当把String类型作为方法参数时，在方法内部对String引用变量重新赋值，
原String变量的值不会改变

119.字符串常量池中是不会存储相同内容的字符串的
String Pool(字符串常量池)是一个固定大小的HashTable（数组加链表的存储方式）,默认值大小长度为1009。
如果放进String Pool的String非常多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的
影响就是当调用String.intern时性能会大幅下降。jdk8设置StringTable的长度1009是可设置的最小值。
String.intern()使用:表示如果字符串常量池不存在，则往常量池里面放一个字符串

字符串常量池放在堆空间中

123. String s1 = "a";
String s2 = "b";
String s3 = "ab";
String s4 = s1 + s2; 
s1 + s2执行细节如下：StringBuilder s = new StringBuilder(); s.append("a").append("b").toString() -> 类似于 new String("ab");
System.out.println(s3 == s4); //false

假如 s1 s2 变量前加了final(如：final String s1 = "a";)则变成了常量，s1 + s2就不会再通过new StringBuilder拼接了
所以s3 == s4 的结果则为true

130.String.intern()使用讲解

135.垃圾是指在运行程序中没有任何指针指向的对象

139.判断对象存活一般有两种方式：引用计数算法和可达性分析算法。
引用计数算法：对每个对象保存一个整型的引用计数器属性,用于记录对象被引用的情况。由于无法处理循环引用的情况，Java没有使用这类算法。
可达性分析算法：以根对象集合（GC Roots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达

GC Roots包括以下几类元素：
虚拟机栈中引用的对象、本地方法栈内JNI引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象
所有被同步锁synchronized持有的对象、Java虚拟机内部的引用（异常对象、系统类加载器、基本类型对应的Class对象）

142.finalize:垃圾回收器回收此对象之前，总会先调用这个对象的finalize()方法
finalize()方法允许被子类重写，用于在对象被回收时进行资源释放
finalize()只能被调用一次
只有在对象不可触及时才可以被回收

147.JVM常见的三种垃圾收集算法：
标记-清除算法（Mark-Sweep）:清除不是真的置空，而是把需要清除对象地址保存在空闲的地址列表。
缺点：效率不算高、用户体验差、产生内存碎片需要维护一个空闲列表 
复制算法（Copying）：两倍的内存空间（A、B）
标记-压缩算法（Mark-Compact）: 移动对象的同时，如果对象被其他对象引用，还需要调整引用的地址
STW stop the world ：指GC事件发生过程中，会产生应用程序（用户线程）的停顿。

152.分代收集算法：增量收集算法、分区算法

155.System.gc()会显式触发Full GC，无法保证立即执行
只有在安全点和安全区域才能进行垃圾回收

Full GC 会带上Young GC（Minor GC）,Old GC（Major GC）,永久代/元空间/方法区

158：内存溢出：没有空闲内存，并且垃圾收集器也无法提供更多内存。
内存泄漏：对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄漏。（单例对象或未关闭io连接、数据库连接）

163.强引用：Object obj = new Object();只用强引用关系还在，永远不会回收被引用的对象。
（99%强引用 默认）
软引用：（内存足够时不会回收引用的对象）系统将要发生内存溢出之前，会将软引用对象回收，如果还没有足够的内存，才会抛出内存溢出异常。
弱引用：发现就会被回收。
虚引用：唯一目的就是被收集器回收时收到一个系统通知。

171.执行垃圾回收的时间越长，延迟越久，吞吐量也越大      吞吐量与暂停时间
执行垃圾回收的时间越短，延迟越低，吞吐量也越小 

CMS 关注低延迟  
G1 在最大吞吐量优先的情况下，降低停顿时间

174.有很多垃圾收集器的原因：因为Java的使用场景很多，移动端，服务器等。所以需要针对不同的场景提供不同的
垃圾收集器提高性能。

178.多CPU是指多核CPU ,单核CPU不支持并行（已淘汰），多核CPU支持并行（如：8核16线程）

180.ParNew Scavenge 采用复制算法、并行回收和“Stop the World”机制 吞吐量优先 （新生代基本都采用复制算法）
高吞吐量：适合在后台运算而不需要太多交互的任务。
Parallel Old 采用标记-压缩算法 并行回收和“Stop the World”机制 老年代
ParNew Scavenge + Parallel Old 是jdk8默认的垃圾收集器（默认开启，开启一个，另一个也会被开启，互相激活）

182.G1是jdk9的默认垃圾收集器
初始标记、重新标记 仍然需要执行 Stop the World
CMS 产生内存碎片，当分配大对象时会提前触发Full GC

186.G1 每次根据允许的收集时间，优先回收价值最大的Region(垃圾最多)，故别名为垃圾优先（Garbage First G1）
G1 将堆空间分为若干个区域（Region），所以也称为分区算法。
G1 划分了一个Humongous区，简称H区，专门用来存放大对象的，如果一个H区装不下，G1会寻找连接的H区来存储。
Region的内存的大小需为2的整次幂，如：256，512，1024

191. G1老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了。

201.令人震惊、革命性的ZGC

266.类的生命周期：加载——链接（验证-准备-解析）——初始化——使用——卸载
基本数据类型由虚拟机预先定义，引用数据类型则需要进行类的加载

267.加载：就是通过类的全名将Java类的字节码文件加载到机器内存中，并在内存中构建出Java类的原型——类模板对象

269.链接验证阶段：格式检查、语义检查、字节码验证、符号引用验证
270.链接准备阶段：为类的静态变量分配内存，并将其初始化为默认值（基本数据类型的字段用static final修饰的情况，因为final在编译的时候就会分配，
准备阶段会显式赋值）(包装类对象Integer.valueOf(100)或new String("a")在初始化阶段赋值<clinit>)
271.链接解析阶段：将类、接口、字段、和方法的符号引用转为直接引用。

272.初始化：为类的静态变量赋予正确的初始值

275.类初始化的主动使用与被动使用
主动使用：Class只有在必须要首次使用的时候才会被装载，Java虚拟机规定，一个类或接口在初次使用（主动使用）前，必须要进行
初始化，初始化之前的加载、验证、准备已经完成。
接口实现类初始化时，如果接口没有default修饰的方法，父接口不会初始化

被动使用：被动使用不会引起类的初始化（不会调<clinit>方法）。以下是被动使用场景：
1.当访问一个静态字段，只有真正声明这个字段的类才会被初始化（当通过子类引用父类的静态变量不会导致子类初始化）
2.通过数组定义类引用，不会触发此类的初始化
3.引用常量不会触发此类或接口的初始化，因为常量在链接阶段就已经显示赋值了

282.方法区的类被卸载的条件很苛刻

288.应用程序类加载器（系统类加载器，AppClassLoader）:继承于ClassLoader类，它负责加载环境变量classpath或系统属性
java.class.path指定路径五的类库

命名空间：不同类加载器有不同的命名空间，同一空间不能拥有完全相同的类（类的唯一性）